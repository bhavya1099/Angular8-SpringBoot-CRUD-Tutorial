/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: Test when the function is called with a null Exception.
   Expected Result: The function should return a ResponseEntity with an error message stating that the Exception is null.

2. Scenario: Test when the function is called with a null WebRequest.
   Expected Result: The function should return a ResponseEntity with an error message stating that the WebRequest is null.

3. Scenario: Test when the function is called with an Exception containing a null message.
   Expected Result: The function should return a ResponseEntity with an error message stating that the Exception message is null.

4. Scenario: Test when the function is called with a WebRequest containing a null description.
   Expected Result: The function should return a ResponseEntity with an error message stating that the WebRequest description is null.

5. Scenario: Test when the function is called with a valid Exception and WebRequest.
   Expected Result: The function should return a ResponseEntity with the error details containing the Exception message and the WebRequest description.

6. Scenario: Test the HttpStatus of the ResponseEntity returned by the function.
   Expected Result: The HttpStatus of the ResponseEntity should be INTERNAL_SERVER_ERROR.

7. Scenario: Test the timestamp of the ErrorDetails object in the ResponseEntity returned by the function.
   Expected Result: The timestamp of the ErrorDetails object should be the current date and time.

8. Scenario: Test the error message of the ErrorDetails object in the ResponseEntity returned by the function.
   Expected Result: The error message of the ErrorDetails object should be the same as the message of the Exception passed to the function.

9. Scenario: Test the details of the ErrorDetails object in the ResponseEntity returned by the function.
   Expected Result: The details of the ErrorDetails object should be the same as the description of the WebRequest passed to the function.
*/
package net.guides.springboot2.springboot2jpacrudexample.exception;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.context.request.WebRequest;

import java.util.Date;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class GlobalExceptionHandler_globleExcpetionHandler_96eed4db2a_Test {

    @InjectMocks
    private GlobalExceptionHandler globalExceptionHandler;

    @Mock
    private WebRequest webRequest;

    @BeforeEach
    public void setUp() {
        when(webRequest.getDescription(false)).thenReturn("WebRequest description");
    }

    @Test
    public void testGlobleExcpetionHandler_NullException() {
        Exception ex = null;
        ResponseEntity<?> response = globalExceptionHandler.globleExcpetionHandler(ex, webRequest);

        assertNotNull(response);
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertTrue(response.getBody() instanceof ErrorDetails);

        ErrorDetails errorDetails = (ErrorDetails) response.getBody();
        assertNotNull(errorDetails.getTimestamp());
        assertEquals("Exception is null", errorDetails.getMessage());
        assertEquals("WebRequest description", errorDetails.getDetails());
    }

    @Test
    public void testGlobleExcpetionHandler_NullWebRequest() {
        Exception ex = new Exception("Exception message");
        ResponseEntity<?> response = globalExceptionHandler.globleExcpetionHandler(ex, null);

        assertNotNull(response);
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertTrue(response.getBody() instanceof ErrorDetails);

        ErrorDetails errorDetails = (ErrorDetails) response.getBody();
        assertNotNull(errorDetails.getTimestamp());
        assertEquals("Exception message", errorDetails.getMessage());
        assertEquals("WebRequest is null", errorDetails.getDetails());
    }

    @Test
    public void testGlobleExcpetionHandler_ExceptionWithNullMessage() {
        Exception ex = new Exception(null);
        ResponseEntity<?> response = globalExceptionHandler.globleExcpetionHandler(ex, webRequest);

        assertNotNull(response);
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertTrue(response.getBody() instanceof ErrorDetails);

        ErrorDetails errorDetails = (ErrorDetails) response.getBody();
        assertNotNull(errorDetails.getTimestamp());
        assertEquals("Exception message is null", errorDetails.getMessage());
        assertEquals("WebRequest description", errorDetails.getDetails());
    }

    @Test
    public void testGlobleExcpetionHandler_WebRequestWithNullDescription() {
        when(webRequest.getDescription(false)).thenReturn(null);

        Exception ex = new Exception("Exception message");
        ResponseEntity<?> response = globalExceptionHandler.globleExcpetionHandler(ex, webRequest);

        assertNotNull(response);
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertTrue(response.getBody() instanceof ErrorDetails);

        ErrorDetails errorDetails = (ErrorDetails) response.getBody();
        assertNotNull(errorDetails.getTimestamp());
        assertEquals("Exception message", errorDetails.getMessage());
        assertEquals("WebRequest description is null", errorDetails.getDetails());
    }

    @Test
    public void testGlobleExcpetionHandler_ValidExceptionAndWebRequest() {
        Exception ex = new Exception("Exception message");
        ResponseEntity<?> response = globalExceptionHandler.globleExcpetionHandler(ex, webRequest);

        assertNotNull(response);
        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, response.getStatusCode());
        assertTrue(response.getBody() instanceof ErrorDetails);

        ErrorDetails errorDetails = (ErrorDetails) response.getBody();
        assertNotNull(errorDetails.getTimestamp());
        assertEquals("Exception message", errorDetails.getMessage());
        assertEquals("WebRequest description", errorDetails.getDetails());
    }
}
