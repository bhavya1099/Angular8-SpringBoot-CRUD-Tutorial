/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

1. Scenario: ResourceNotFoundException is thrown with a valid message.
   Test: Pass a valid string message to the ResourceNotFoundException constructor and check if the exception is thrown with the same message.

2. Scenario: ResourceNotFoundException is thrown with an empty message.
   Test: Pass an empty string message to the ResourceNotFoundException constructor and check if the exception is thrown with an empty message.

3. Scenario: ResourceNotFoundException is thrown with a null message.
   Test: Pass a null message to the ResourceNotFoundException constructor and check if the exception is thrown with a null message.

4. Scenario: ResourceNotFoundException is thrown with a message containing special characters.
   Test: Pass a string message with special characters to the ResourceNotFoundException constructor and check if the exception is thrown with the same message.

5. Scenario: ResourceNotFoundException is thrown with a message containing numbers.
   Test: Pass a string message with numbers to the ResourceNotFoundException constructor and check if the exception is thrown with the same message.

6. Scenario: ResourceNotFoundException is thrown with a long message.
   Test: Pass a very long string message to the ResourceNotFoundException constructor and check if the exception is thrown with the same long message.

7. Scenario: ResourceNotFoundException is thrown with a message containing whitespace.
   Test: Pass a string message with leading, trailing, or embedded whitespace to the ResourceNotFoundException constructor and check if the exception is thrown with the same message. 

8. Scenario: HTTP status code when ResourceNotFoundException is thrown.
   Test: Check if the HTTP status code is 404 (Not Found) when ResourceNotFoundException is thrown.

9. Scenario: ResourceNotFoundException is thrown with a message containing non-English characters.
   Test: Pass a string message with non-English characters to the ResourceNotFoundException constructor and check if the exception is thrown with the same message.
*/
package net.guides.springboot2.springboot2jpacrudexample.exception;

import org.junit.jupiter.api.Test;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;
import static org.junit.jupiter.api.Assertions.*;

class ResourceNotFoundException_ResourceNotFoundException_e25344723c_Test {

    @Test
    void testResourceNotFoundExceptionWithValidMessage() {
        String message = "Resource not found";
        ResourceNotFoundException exception = new ResourceNotFoundException(message);
        assertEquals(message, exception.getMessage());
    }

    @Test
    void testResourceNotFoundExceptionWithEmptyMessage() {
        String message = "";
        ResourceNotFoundException exception = new ResourceNotFoundException(message);
        assertEquals(message, exception.getMessage());
    }

    @Test
    void testResourceNotFoundExceptionWithNullMessage() {
        String message = null;
        ResourceNotFoundException exception = new ResourceNotFoundException(message);
        assertNull(exception.getMessage());
    }

    @Test
    void testResourceNotFoundExceptionWithSpecialCharactersInMessage() {
        String message = "@#$$%^&*";
        ResourceNotFoundException exception = new ResourceNotFoundException(message);
        assertEquals(message, exception.getMessage());
    }

    @Test
    void testResourceNotFoundExceptionWithNumbersInMessage() {
        String message = "1234567890";
        ResourceNotFoundException exception = new ResourceNotFoundException(message);
        assertEquals(message, exception.getMessage());
    }

    @Test
    void testResourceNotFoundExceptionWithLongMessage() {
        String message = "This is a very long message that goes beyond the normal length of a message";
        ResourceNotFoundException exception = new ResourceNotFoundException(message);
        assertEquals(message, exception.getMessage());
    }

    @Test
    void testResourceNotFoundExceptionWithWhiteSpaceInMessage() {
        String message = "   Leading whitespace";
        ResourceNotFoundException exception = new ResourceNotFoundException(message);
        assertEquals(message, exception.getMessage());
    }

    @Test
    void testResourceNotFoundExceptionHttpStatus() {
        ResponseStatus responseStatus = ResourceNotFoundException.class.getAnnotation(ResponseStatus.class);
        assertEquals(HttpStatus.NOT_FOUND, responseStatus.value());
    }

    @Test
    void testResourceNotFoundExceptionWithNonEnglishCharactersInMessage() {
        String message = "メッセージ";
        ResourceNotFoundException exception = new ResourceNotFoundException(message);
        assertEquals(message, exception.getMessage());
    }
}
