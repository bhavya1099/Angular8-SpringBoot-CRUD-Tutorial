/*
Test generated by RoostGPT for test demoTestGitlab using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Null Timestamp
- Description: Verify that the function returns null when the timestamp is not set.

Test Scenario 2: Non-Null Timestamp
- Description: Verify that the function returns the correct timestamp when it is set.

Test Scenario 3: Timestamp Format
- Description: Verify that the returned timestamp is in the correct Date format.

Test Scenario 4: Timestamp Value
- Description: Verify that the returned timestamp value is correct and matches the expected value.

Test Scenario 5: Timestamp Update
- Description: Verify that the returned timestamp updates correctly when the system time changes.

Test Scenario 6: Multiple Invocations
- Description: Verify that the function returns the same timestamp value for multiple invocations if the system time does not change.

Test Scenario 7: Thread Safety
- Description: Verify that the function behaves correctly when accessed by multiple threads concurrently.

Test Scenario 8: Exception Handling
- Description: Verify that the function handles any potential exceptions correctly, such as an OutOfMemoryError if the system runs out of resources.

Test Scenario 9: Performance
- Description: Verify that the function performs well and returns the timestamp quickly, even under high load.

Test Scenario 10: Timestamp Precision
- Description: Verify that the timestamp returned has the correct level of precision (i.e., to the millisecond).
*/
package net.guides.springboot2.springboot2jpacrudexample.exception;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;
import java.util.Date;

public class ErrorDetails_getTimestamp_23b3ad1f3d_Test {

    @Test
    public void testGetTimestamp_NullTimestamp() {
        ErrorDetails errorDetails = new ErrorDetails(null, "message", "details");
        assertNull(errorDetails.getTimestamp());
    }

    @Test
    public void testGetTimestamp_NonNullTimestamp() {
        Date date = new Date();
        ErrorDetails errorDetails = new ErrorDetails(date, "message", "details");
        assertNotNull(errorDetails.getTimestamp());
    }

    @Test
    public void testGetTimestamp_CorrectValue() {
        Date date = new Date();
        ErrorDetails errorDetails = new ErrorDetails(date, "message", "details");
        assertEquals(date, errorDetails.getTimestamp());
    }
    
    @Test
    public void testGetTimestamp_Update() {
        Date date1 = new Date();
        ErrorDetails errorDetails = new ErrorDetails(date1, "message", "details");
        Date date2 = new Date();
        errorDetails.setTimestamp(date2);
        assertNotEquals(date1, errorDetails.getTimestamp());
        assertEquals(date2, errorDetails.getTimestamp());
    }

    @Test
    public void testGetTimestamp_MultipleInvocations() {
        Date date = new Date();
        ErrorDetails errorDetails = new ErrorDetails(date, "message", "details");
        assertEquals(date, errorDetails.getTimestamp());
        assertEquals(date, errorDetails.getTimestamp());
    }
}
